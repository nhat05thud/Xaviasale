@using Xaviasale.Models
@using Umbraco.Web.Models
@inherits UmbracoViewPage<Xaviasale.Models.CheckOutModel>
@{
    var home = Umbraco.ContentAtRoot().FirstOrDefault();
    var checkout = home.DescendantOfType("checkout");
    var cart = home.DescendantOfType("cart");
    var logo = home.Value<IPublishedContent>("logo");
    decimal totalPrice = 0;
    var hasCoupon = false;
    var hasTotalCoupon = false;
    decimal totalDiscount = 0;
    foreach (var item in Model.Carts)
    {
        if (item.CouponId > 0 && hasCoupon == false)
        {
            hasTotalCoupon = true;
            var coupon = Umbraco.Content(item.CouponId);
            totalDiscount = coupon.Value<decimal>("discount");
        }
        var product = Umbraco.Content(item.ProductId);
        if (product != null)
        {
            var node = product.Value<IEnumerable<IPublishedElement>>("productColorNested").FirstOrDefault(x => x.Value<string>("title").Equals(item.Color));
            totalPrice += (totalDiscount > 0 ? (node.Value<decimal>("price") - node.Value<decimal>("price") * (totalDiscount / 100)) * item.Quantity : (node.Value<decimal>("price") * item.Quantity));
        }
    }
}
@Html.AntiForgeryToken()
<div class="main">
    <div class="main__header">
        <a href="@home.Url()" class="no-underline logo logo--position">
            <img src="@(logo != null ? logo.Url() : "")" class="logo__image logo__image--medium">
        </a>
        <ul class="breadcrumbs">
            <li class="breadcrumb">
                <a href="@cart.Url()" class="breadcrumb--completed">@cart.Name</a>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M0 0h24v24H0z" fill="none"></path>
                    <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
                </svg>
                <span class="breadcrumb--current"><span>@checkout.Name</span></span>
            </li>
        </ul>
    </div>
    <div class="main__content">
        <div class="step__sections step__sections--no-border">
            <div>
                <div class="section section-contact-information scoped checkout">
                    <div class="section__header">
                        <div class="layout-flex layout-flex--align-center layout-flex--loose-vertical layout-flex--loose-horizontal layout-flex--wrap">
                            <h2 class="section__title layout-flex__item layout-flex__item--stretch">
                                <div class="layout-flex layout-flex--medium-tight-horizontal layout-flex--flex-start">
                                    <span class="layout-flex__item d-flex align-items-center">
                                        <svg width="18" height="24" viewBox="0 0 18 24">
                                            <g stroke="#1A1A1A" stroke-width="2" fill="none"
                                               fill-rule="evenodd" stroke-linecap="square">
                                                <path d="M17 9c0 4.9-8 13-8 13S1 13.9 1 9c0-5.1 4.1-8 8-8 3.9 0 8 2.9 8 8z"></path>
                                                <path d="M11.1213 6.87868c1.17157 1.17157 1.17157 3.07107 0 4.24264-1.17157 1.17157-3.07107 1.17157-4.24264 0-1.17157-1.17157-1.17157-3.07107 0-4.24264 1.17157-1.17157 3.07107-1.17157 4.24264 0"></path>
                                            </g>
                                        </svg>
                                    </span>
                                    <span class="layout-flex__item section__title--emphasis">Shipping address</span>
                                </div>
                            </h2>
                        </div>
                    </div>
                    <div class="section__content">
                        <div class="fieldset floating-label">
                            <div class="field">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded">
                                        @Html.LabelFor(model => model.Email, "Email", new { @class = "s-label" })
                                        @Html.TextBoxFor(model => model.Email, new { @class = "s-input__inner", placeholder = "Email", autocomplete = "shipping email" })
                                        @Html.ValidationMessageFor(x => x.Email)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="section section-shipping-address">
                    <div class="section__content">
                        <div class="fieldset floating-label" visible-customer-note="">
                            <div class="field field--half">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded">
                                        @Html.LabelFor(model => model.FirstName, "First name", new { @class = "s-label" })
                                        @Html.TextBoxFor(model => model.FirstName, new { @class = "s-input__inner", placeholder = "First name", autocomplete = "shipping given-name" })
                                        @Html.ValidationMessageFor(x => x.FirstName)
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded">
                                        @Html.LabelFor(model => model.LastName, "Last name", new { @class = "s-label" })
                                        @Html.TextBoxFor(model => model.LastName, new { @class = "s-input__inner", placeholder = "Last name", autocomplete = "shipping family-name" })
                                        @Html.ValidationMessageFor(x => x.LastName)
                                    </div>
                                </div>
                            </div>
                            <div class="field">
                                <div class="s-autocomplete control is-expanded">
                                    <div class="s-input-wrapper">
                                        <div class="is-medium s-input is-expanded">
                                            @Html.LabelFor(model => model.Address, "Address", new { @class = "s-label" })
                                            @Html.TextBoxFor(model => model.Address, new { @class = "s-input__inner", placeholder = "Address", autocomplete = "shipping address-line1" })
                                            @Html.ValidationMessageFor(x => x.Address)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded is-show-floating-label">
                                        @Html.LabelFor(model => model.PaymentMethod, "Chanel", new { @class = "s-label" })
                                        @Html.DropDownListFor(model => model.PaymentMethod, new SelectList(
                                            new List<SelectListItem> {
                                                //new SelectListItem { Selected = true, Text = "USDT.TRC20", Value = "USDT.TRC20" },
                                                new SelectListItem { Selected = false, Text = "PAYPAL", Value = "PAYPAL.GIFTS" }
                                                //new SelectListItem { Selected = false, Text = "TRX", Value = "TRX" },
                                                //new SelectListItem { Selected = false, Text = "ETH", Value = "ETH" }
                                           }, "Value", "Text"
                                        ), new { @class = "s-input__inner" })
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded">
                                        @Html.LabelFor(model => model.Apartment, "Apartment, suite, etc. (optional)", new { @class = "s-label" })
                                        @Html.TextBoxFor(model => model.Apartment, new { @class = "s-input__inner", placeholder = "Apartment, suite, etc. (optional)", autocomplete = "shipping address-line2" })
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="s-autocomplete control is-expanded">
                                    <div class="s-input-wrapper">
                                        <div class="is-medium s-input is-expanded">
                                            @Html.LabelFor(model => model.ZipCode, "Zip Code", new { @class = "s-label" })
                                            @Html.TextBoxFor(model => model.ZipCode, new { @class = "s-input__inner", placeholder = "Zip Code", autocomplete = "chrome-off" })
                                            @Html.ValidationMessageFor(x => x.ZipCode)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded">
                                        @Html.LabelFor(model => model.City, "City", new { @class = "s-label" })
                                        @Html.TextBoxFor(model => model.City, new { @class = "s-input__inner", placeholder = "City", autocomplete = "address-level2" })
                                        @Html.ValidationMessageFor(x => x.City)
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="relative s-select-searchable">
                                    <div class="relative s-select-searchable__input-select-wrapper">
                                        <div class="s-input-wrapper">
                                            <div class="is-medium s-input is-expanded">
                                                @Html.LabelFor(model => model.State, "State", new { @class = "s-label" })
                                                @Html.TextBoxFor(model => model.State, new { @class = "s-input__inner", placeholder = "State", autocomplete = "shipping address-level1" })
                                                @Html.ValidationMessageFor(x => x.State)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="field field--half">
                                <div class="relative s-select-searchable">
                                    <div class="relative s-select-searchable__input-select-wrapper">
                                        <div class="s-input-wrapper">
                                            <div class="is-medium s-input is-expanded">
                                                @Html.LabelFor(model => model.Country, "Country", new { @class = "s-label" })
                                                @Html.TextBoxFor(model => model.Country, new { @class = "s-input__inner", placeholder = "Country", autocomplete = "shipping country" })
                                                @Html.ValidationMessageFor(x => x.Country)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="field">
                                <div class="s-input-wrapper">
                                    <div class="is-medium s-input is-expanded">
                                        @Html.LabelFor(model => model.Phone, "Phone number (optional)", new { @class = "s-label" })
                                        @Html.TextBoxFor(model => model.Phone, new { @class = "s-input__inner", placeholder = "Phone number (optional)", autocomplete = "shipping tel" })
                                    </div>
                                </div>
                                <div class="field__icon has-tooltip">
                                    <span class="tooltip">
                                        <span>Message frequency varies.</span>
                                    </span>
                                    <div class="field__icon-svg">
                                        <svg width="18" height="18" viewBox="0 0 18 18">
                                            <g fill="none" fill-rule="evenodd">
                                                <path d="M-1-1h20v20H-1z"></path>
                                                <path d="M8.16666667 14H9.8333333v-1.6666667H8.16666667V14zM9 .66666667C4.4.66666667.66666667 4.4.66666667 9 .66666667 13.6 4.4 17.3333333 9 17.3333333 13.6 17.3333333 17.3333333 13.6 17.3333333 9S13.6.66666667 9 .66666667zM9 15.6666667C5.325 15.6666667 2.33333333 12.675 2.33333333 9 2.33333333 5.325 5.325 2.33333333 9 2.33333333S15.6666667 5.325 15.6666667 9 12.675 15.6666667 9 15.6666667zM9 4C7.15833333 4 5.66666667 5.49166667 5.66666667 7.33333333h1.66666666c0-.91666666.75-1.66666666 1.66666667-1.66666666.9166667 0 1.6666667.75 1.6666667 1.66666666C10.6666667 9 8.16666667 8.79166667 8.16666667 11.5H9.8333333c0-1.875 2.5-2.0833333 2.5-4.16666667C12.3333333 5.49166667 10.8416667 4 9 4z"
                                                      fill="#C1C1C1" fill-rule="nonzero">
                                                </path>
                                            </g>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="step__sections step__sections--no-border">
            <div class="cta-container">
                <button type="submit" class="s-button step__complete-order">
                    <p class="step__complete-order--emphasis">
                        <svg width="18" height="23" viewBox="0 0 18 23" class="step__complete-order--shield-icon">
                            <g fill="none" fill-rule="evenodd">
                                <path d="M-3-1h24v24.75H-3z"></path>
                                <path d="M18 10.3759766c-.0625003 2.9326318-.9218667 5.5429573-2.578125 7.8310546C13.7656167 20.4951286 11.6250131 22.0097619 9 22.7509766c-2.62501312-.7412147-4.76561672-2.255848-6.421875-4.5439454C.92186672 15.9189339.06250031 13.3086084 0 10.3759766V4.18847656L9 .03125l9 4.15722656v6.18750004zM9 20.6723633c1.9375097-.580081 3.5781183-1.8288479 4.921875-3.7463379 1.3437567-1.9174901 2.0312498-4.0363654 2.0625-6.3566895V5.49365234L9 2.30322266V20.6723633z"
                                      fill="#FFF" fill-rule="nonzero"></path>
                            </g>
                        </svg>
                        <span class="step__complete-order--label">
                            Place Your Order
                        </span>
                    </p>
                    <p class="step__complete-order--subdued">
                        <span class="mr4">Total:</span>
                        <span>$@totalPrice</span>
                    </p>
                </button>
            </div>
        </div>
    </div>
    <div class="main__footer">
        <div>
            <ul class="policy-list">
                <li class="policy-list__item">
                    <button type="button">Refund policy</button>
                </li>
                <li class="policy-list__item">
                    <button type="button">Shipping policy</button>
                </li>
                <li class="policy-list__item">
                    <button type="button">
                        Terms of
                        service
                    </button>
                </li>
                <li class="policy-list__item"><button type="button">DMCA</button></li>
                <li class="policy-list__item">
                    <button type="button">
                        Payment
                        Agreement
                    </button>
                </li>
                <li class="policy-list__item">
                    I consent to receive recurring automated
                    marketing by text message through an automatic telephone dialing system.
                    Consent is not a condition to purchase. STOP to cancel, HELP for help.
                    Message and Data rates apply. <button type="button">
                        View Privacy Policy
                        &amp; ToS.
                    </button>
                </li>
            </ul>
        </div>
    </div>
</div>
<div class="sidebar scoped checkout">
    <div class="sidebar__after"></div>
    <div class="sidebar__content">
        <div class="order-summary">
            <div class="order-summary__sections">
                <div class="order-summary__section order-summary__section--dispatched-on">
                    <div class="order-summary__section-content section-shipping-summary">
                        <div>
                            <div class="shipping-summary-text">
                                <span>Ready to ship as early as&nbsp;</span>
                                <span class="time-shipping-summary-text">September 6, 2022</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="order-summary__section order-summary__section--product-list">
                    <div class="order-summary__section-content">
                        <table class="checkout-product-table">
                            <tbody>
                                @foreach (var item in Model.Carts)
                                {
                                    decimal discount = 0;
                                    if (item.CouponId > 0 && hasCoupon == false)
                                    {
                                        hasCoupon = true;
                                        var coupon = Umbraco.Content(item.CouponId);
                                        discount = coupon.Value<decimal>("discount");
                                    }
                                    var product = Umbraco.Content(item.ProductId);
                                    if (product != null)
                                    {
                                        var node = product.Value<IEnumerable<IPublishedElement>>("productColorNested").FirstOrDefault(x => x.Value<string>("title").Equals(item.Color));
                                        var productImages = node.Value<IEnumerable<IPublishedContent>>("images");
                                        <tr class="checkout-product">
                                            <td class="checkout-product__image">
                                                <div class="checkout-product-thumbnail">
                                                    <div class="checkout-product-thumbnail__wrapper">
                                                        <img src="@(productImages != null && productImages.Any() ? productImages.FirstOrDefault().GetCropUrl(68, 68, imageCropMode:ImageCropMode.BoxPad, furtherOptions: "&bgcolor=fff&slimmage=true") : "https://via.placeholder.com/68x68")" alt="@product.Name" class="checkout-product-thumbnail__image">
                                                    </div><span class="checkout-product-thumbnail__quantity">@item.Quantity</span>
                                                </div>
                                            </td>
                                            <td class="checkout-product__description">
                                                <span class="checkout-product__name">@product.Name</span>
                                                <div class="checkout-product__spacing-container">
                                                    <span class="checkout-product__variant">@item.Color</span>
                                                </div>
                                            </td>
                                            <td class="checkout-product__price">
                                                <span class="discounted-price order-summary__emphasis">$@(discount > 0 ? node.Value<decimal>("price") - node.Value<decimal>("price") * (discount / 100) : node.Value<decimal>("price"))</span>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="order-summary__section order-summary__section--total-lines pt-0">
                    <table class="total-line-table">
                        <tbody>
                            <tr class="total-line">
                                <td class="total-line__name">Subtotal</td>
                                <td class="total-line__price">
                                    <span class="order-summary__emphasis">$@totalPrice</span>
                                </td>
                            </tr>
                            <tr class="total-line">
                                <td class="total-line__name">Shipping</td>
                                <td class="total-line__price">
                                    <span class="order-summary__emphasis">$0.00</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="total-line-table">
                        <tbody>
                        </tbody>
                    </table>
                    <div>
                        <table class="total-line-table">
                            <tfoot class="total-line-table__footer">
                                <tr class="total-line">
                                    <td class="total-line__name">
                                        <span class="payment-due__label-total">Total:</span>
                                    </td>
                                    <td>
                                        <span class="payment-due__price">$@totalPrice</span>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>

                <div class="order-summary__section order-summary__section--policies">
                    <div>
                        <ul class="policy-list">
                            <li class="policy-list__item">
                                <button type="button">
                                    Refund
                                    policy
                                </button>
                            </li>
                            <li class="policy-list__item">
                                <button type="button">
                                    Shipping
                                    policy
                                </button>
                            </li>
                            <li class="policy-list__item">
                                <button type="button">
                                    Terms of
                                    service
                                </button>
                            </li>
                            <li class="policy-list__item">
                                <button type="button">
                                    DMCA
                                </button>
                            </li>
                            <li class="policy-list__item">
                                <button type="button">
                                    Payment
                                    Agreement
                                </button>
                            </li>
                            <li class="policy-list__item">
                                I consent to receive recurring
                                automated marketing by text message through an automatic
                                telephone dialing system. Consent is not a condition to
                                purchase. STOP to cancel, HELP for help. Message and Data
                                rates apply. <button type="button">
                                    View Privacy Policy &amp;
                                    ToS.
                                </button>
                            </li>
                        </ul>

                    </div>
                </div>
            </div>
            <div id="why-us" style="position:relative;padding:10px 0px;color: #666">
                <div class="wyustit" style="position:relative;z-index:1;text-align:center">
                    <span style="background:#f2f2f2;padding:0 15px">
                        Why choose
                        us?
                    </span><span style="position: absolute; height: 1px;width: 100%;top: 50%;background: #dfdfdf;left: 0;z-index: -1;"></span>
                </div>
                <div class="wyuscs" style="overflow: auto;margin-top: 16px;">
                    <div class="wyuscs1" style="float: left;width: 20%">
                        <img style="max-width: 64px;"
                             src="https://img.thesitebase.net/files/10038432/2019/06/19/0x500@mail-truck-64e12.png">
                    </div>
                    <div class="wyuscs2" style="float:right;width: 80%">
                        <span style="font-weight: bold">
                            Over 44,249 successfully shipped
                            orders
                        </span>
                        <p>
                            We made as many happy customers as many orders we shipped. You
                            simply have to join our big family.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@for (int i = 0; i < Model.Carts.Count; i++)
{
    @Html.HiddenFor(model => Model.Carts[i].ProductId)
    @Html.HiddenFor(model => Model.Carts[i].Quantity)
    @Html.HiddenFor(model => Model.Carts[i].Color)
    @Html.HiddenFor(model => Model.Carts[i].CouponId)
}
@Html.HiddenFor(x => x.CultureLcid)
<div class="loading_div"></div>